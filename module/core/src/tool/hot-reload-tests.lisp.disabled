;;;; Hot Reload System Tests
;;;;
;;;; Comprehensive tests for the hot reload development system including
;;;; file watching, change detection, dependency tracking, and reload performance.

(defpackage :epsilon.tool.hot-reload.tests
  (:use :cl)
  (:local-nicknames
   (:hot :epsilon.tool.hot-reload)
   (:build :epsilon.tool.build)
   (:test :epsilon.tool.test)
   (:fs :epsilon.sys.fs)
   (:path :epsilon.lib.path)
   (:map :epsilon.lib.map)
   (:str :epsilon.lib.string))
  (:export #:run-hot-reload-tests))

(in-package :epsilon.tool.hot-reload.tests)

(test:deftest hot-reload-session-lifecycle ()
  "Test hot reload session creation and cleanup"
  
  ;; Test session creation
  (let ((session (hot:start-hot-reload 
                  :directories '("test-src")
                  :auto-reload nil)))
    
    (test:is (not (null session)) "Session created")
    (test:is (hot:reload-session-active-p) "Session is active")
    (test:is (typep session 'hot:reload-session) "Correct session type")
    
    ;; Test session state
    (test:is (= 0 (hot:reload-statistics-files-watched 
                   (hot:session-statistics session)))
             "Initial watch count is zero")
    
    ;; Stop session
    (hot:stop-hot-reload)
    (test:is (not (hot:reload-session-active-p)) "Session stopped")))

(test:deftest file-change-detection ()
  "Test file change detection using content hashes"
  
  ;; Create temporary test file
  (let* ((test-file "/tmp/test-hot-reload.lisp")
         (test-uri (path:uri-from-path test-file))
         (initial-content "(defun test-fn () 'initial)")
         (modified-content "(defun test-fn () 'modified)"))
    
    (unwind-protect
         (progn
           ;; Write initial content
           (with-open-file (stream test-file 
                                   :direction :output 
                                   :if-exists :supersede)
             (write-string initial-content stream))
           
           ;; Start session and record initial state
           (let ((session (hot:start-hot-reload :files (list test-file))))
             (hot:record-file-state test-uri (build:calculate-hash test-uri))
             
             ;; Verify file is not changed initially
             (test:is (not (hot:file-changed-p test-uri)) 
                      "File not changed initially")
             
             ;; Modify file
             (sleep 0.1) ; Ensure different timestamp
             (with-open-file (stream test-file 
                                     :direction :output 
                                     :if-exists :supersede)
               (write-string modified-content stream))
             
             ;; Verify change detected
             (test:is (hot:file-changed-p test-uri) 
                      "File change detected")
             
             ;; Update state
             (hot:update-file-state test-uri)
             
             ;; Verify state updated
             (test:is (not (hot:file-changed-p test-uri)) 
                      "File state updated")
             
             (hot:stop-hot-reload)))
      
      ;; Cleanup
      (when (probe-file test-file)
        (delete-file test-file)))))

(test:deftest dependency-graph-building ()
  "Test dependency graph construction and analysis"
  
  (let ((session (hot:start-hot-reload :auto-reload nil)))
    (unwind-protect
         (progn
           ;; Mock some source files with dependencies
           (let ((source-a (make-instance 'build:source-info
                                          :uri "file:///src/a.lisp"
                                          :hash "hash-a"
                                          :defines "package-a"
                                          :requires '()))
                 (source-b (make-instance 'build:source-info
                                          :uri "file:///src/b.lisp" 
                                          :hash "hash-b"
                                          :defines "package-b"
                                          :requires '("package-a")))
                 (source-c (make-instance 'build:source-info
                                          :uri "file:///src/c.lisp"
                                          :hash "hash-c"
                                          :defines "package-c"
                                          :requires '("package-b"))))
             
             ;; Record file states
             (hot:record-file-state "file:///src/a.lisp" "hash-a")
             (hot:record-file-state "file:///src/b.lisp" "hash-b") 
             (hot:record-file-state "file:///src/c.lisp" "hash-c")
             
             ;; Build dependency graph
             (hot:build-dependency-graph)
             
             ;; Test dependency lookup
             (let ((b-dependents (hot:find-dependents "file:///src/a.lisp")))
               (test:is (member "file:///src/b.lisp" b-dependents :test #'string=)
                        "Package A has package B as dependent"))
             
             ;; Test transitive dependencies
             (let ((transitive (hot:find-transitive-dependents "file:///src/a.lisp")))
               (test:is (member "file:///src/b.lisp" transitive :test #'string=)
                        "Transitive includes direct dependent")
               (test:is (member "file:///src/c.lisp" transitive :test #'string=)
                        "Transitive includes indirect dependent"))))
      
      (hot:stop-hot-reload))))

(test:deftest ignore-patterns ()
  "Test file ignore pattern matching"
  
  (test:is (hot:should-ignore-file-p "test.fasl") 
           "Compiled files ignored")
  (test:is (hot:should-ignore-file-p "backup~") 
           "Backup files ignored")
  (test:is (hot:should-ignore-file-p ".#lockfile") 
           "Lock files ignored")
  (test:is (not (hot:should-ignore-file-p "source.lisp")) 
           "Source files not ignored")
  (test:is (not (hot:should-ignore-file-p "tests.lisp")) 
           "Test files not ignored"))

(test:deftest reload-statistics ()
  "Test reload session statistics tracking"
  
  (let ((session (hot:start-hot-reload :auto-reload nil)))
    (unwind-protect
         (let ((stats (hot:get-reload-statistics)))
           (test:is (not (null stats)) "Statistics available")
           (test:is (= 0 (hot:reload-statistics-reloads-performed stats))
                    "Initial reload count is zero")
           (test:is (= 0.0 (hot:reload-statistics-total-reload-time stats))
                    "Initial reload time is zero")
           
           ;; Test statistics structure
           (test:is (typep stats 'hot:reload-statistics)
                    "Correct statistics type"))
      
      (hot:stop-hot-reload))))

(test:deftest cache-management ()
  "Test reload cache operations"
  
  (let ((session (hot:start-hot-reload :auto-reload nil)))
    (unwind-protect
         (progn
           ;; Add some file states
           (hot:record-file-state "file:///test1.lisp" "hash1")
           (hot:record-file-state "file:///test2.lisp" "hash2")
           
           ;; Verify cache has entries
           (test:is (> (map:count (hot:session-file-states session)) 0)
                    "Cache has entries")
           
           ;; Clear cache
           (hot:clear-reload-cache)
           
           ;; Verify cache cleared
           (test:is (= (map:count (hot:session-file-states session)) 0)
                    "Cache cleared"))
      
      (hot:stop-hot-reload))))

(test:deftest glob-pattern-matching ()
  "Test glob pattern matching utility"
  
  (test:is (hot:match-glob-pattern "test.fasl" "*.fasl")
           "Wildcard suffix match")
  (test:is (hot:match-glob-pattern ".#temp" ".#*") 
           "Wildcard prefix match")
  (test:is (hot:match-glob-pattern "exact.file" "exact.file")
           "Exact match")
  (test:is (not (hot:match-glob-pattern "test.lisp" "*.fasl"))
           "Non-match fails")
  (test:is (not (hot:match-glob-pattern "other.txt" ".#*"))
           "Prefix non-match fails"))

(test:deftest performance-test ()
  "Test hot reload performance with multiple files"
  
  ;; Create multiple temporary files
  (let ((temp-files '())
        (start-time (get-internal-real-time)))
    
    (unwind-protect
         (progn
           ;; Create 10 test files
           (dotimes (i 10)
             (let ((file-path (format nil "/tmp/perf-test-~D.lisp" i)))
               (push file-path temp-files)
               (with-open-file (stream file-path 
                                       :direction :output 
                                       :if-exists :supersede)
                 (format stream "(defpackage :test-~D (:use :cl))~%" i)
                 (format stream "(in-package :test-~D)~%" i)
                 (format stream "(defun test-fn-~D () ~D)~%" i i))))
           
           ;; Start hot reload session
           (let ((session (hot:start-hot-reload 
                           :files temp-files
                           :auto-reload nil)))
             
             ;; Force reload all files
             (let ((reload-start (get-internal-real-time)))
               (hot:force-reload)
               (let ((reload-time (/ (- (get-internal-real-time) reload-start)
                                     internal-time-units-per-second)))
                 
                 (test:is (< reload-time 5.0)
                          "Reload completes within 5 seconds")
                 
                 ;; Check statistics
                 (let ((stats (hot:get-reload-statistics)))
                   (test:is (> (hot:reload-statistics-reloads-performed stats) 0)
                            "Reload was performed"))))
             
             (hot:stop-hot-reload)))
      
      ;; Cleanup files
      (dolist (file temp-files)
        (when (probe-file file)
          (delete-file file))))))

(test:deftest configuration-options ()
  "Test hot reload configuration options"
  
  ;; Test with different configurations
  (let ((session1 (hot:start-hot-reload 
                   :auto-reload t
                   :reload-tests nil)))
    (test:is hot:*auto-reload* "Auto-reload enabled")
    (test:is (not hot:*reload-tests*) "Test reload disabled")
    (hot:stop-hot-reload))
  
  (let ((session2 (hot:start-hot-reload 
                   :auto-reload nil
                   :reload-tests t)))
    (test:is (not hot:*auto-reload*) "Auto-reload disabled")
    (test:is hot:*reload-tests* "Test reload enabled")
    (hot:stop-hot-reload)))

(test:deftest api-functions ()
  "Test public API functions"
  
  (let ((session (hot:start-hot-reload :auto-reload nil)))
    (unwind-protect
         (progn
           ;; Test manual reload
           (hot:reload-changed) ; Should complete without error
           
           ;; Test force reload
           (hot:force-reload) ; Should complete without error
           
           ;; Test statistics access
           (test:is (not (null (hot:get-reload-statistics)))
                    "Statistics accessible")
           
           ;; Test cache operations
           (hot:clear-reload-cache) ; Should complete without error
           
           ;; Test session status
           (test:is (hot:reload-session-active-p)
                    "Session status accessible"))
      
      (hot:stop-hot-reload))))

(defun run-hot-reload-tests ()
  "Run all hot reload system tests"
  (test:run-tests :package "epsilon.tool.hot-reload.tests"
                  :verbose t))

;; Integration test demonstrating complete workflow
(test:deftest complete-workflow-integration ()
  "Integration test showing complete hot reload workflow"
  
  (let ((test-dir "/tmp/hot-reload-integration/")
        (source-file "/tmp/hot-reload-integration/src/main.lisp")
        (test-file "/tmp/hot-reload-integration/tests/main-tests.lisp"))
    
    (unwind-protect
         (progn
           ;; Create test directory structure
           (ensure-directories-exist test-dir)
           (ensure-directories-exist (format nil "~Asrc/" test-dir))
           (ensure-directories-exist (format nil "~Atests/" test-dir))
           
           ;; Create initial source file
           (with-open-file (stream source-file 
                                   :direction :output 
                                   :if-exists :supersede)
             (format stream "(defpackage :hot-reload-test~%")
             (format stream "  (:use :cl)~%")
             (format stream "  (:export #:add))~%")
             (format stream "(in-package :hot-reload-test)~%")
             (format stream "(defun add (a b) (+ a b))~%"))
           
           ;; Create test file
           (with-open-file (stream test-file 
                                   :direction :output 
                                   :if-exists :supersede)
             (format stream "(defpackage :hot-reload-test.tests~%")
             (format stream "  (:use :cl :hot-reload-test)~%")
             (format stream "  (:local-nicknames (:test :epsilon.tool.test)))~%")
             (format stream "(in-package :hot-reload-test.tests)~%")
             (format stream "(test:deftest add-test ()~%")
             (format stream "  (test:is (= 5 (add 2 3))))~%"))
           
           ;; Start hot reload session
           (let ((session (hot:start-hot-reload 
                           :directories (list (format nil "~Asrc" test-dir)
                                              (format nil "~Atests" test-dir))
                           :auto-reload t
                           :reload-tests t)))
             
             ;; Simulate file change
             (sleep 0.1) ; Ensure different timestamp
             (with-open-file (stream source-file 
                                     :direction :output 
                                     :if-exists :supersede)
               (format stream "(defpackage :hot-reload-test~%")
               (format stream "  (:use :cl)~%")
               (format stream "  (:export #:add #:multiply))~%")
               (format stream "(in-package :hot-reload-test)~%")
               (format stream "(defun add (a b) (+ a b))~%")
               (format stream "(defun multiply (a b) (* a b))~%"))
             
             ;; Trigger reload manually
             (hot:reload-changed)
             
             ;; Verify statistics updated
             (let ((stats (hot:get-reload-statistics)))
               (test:is (>= (hot:reload-statistics-reloads-performed stats) 1)
                        "Reload was performed"))
             
             (hot:stop-hot-reload)))
      
      ;; Cleanup
      (when (probe-file test-dir)
        (dolist (file (list source-file test-file))
          (when (probe-file file)
            (delete-file file)))
        ;; Note: Directory cleanup would require recursive deletion
        ))))