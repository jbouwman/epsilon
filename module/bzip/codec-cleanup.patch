# Patch to remove BZip2 code from codec.lisp
# 
# This patch removes BZip2-specific code that has been moved to the
# separate bzip module. Apply with: patch -p1 < codec-cleanup.patch

--- a/module/core/src/lib/codec.lisp
+++ b/module/core/src/lib/codec.lisp
@@ -146,8 +146,8 @@
 ;;; for DECOMPRESS.
 (defconstant +default-buffer-size+ 8192)
 
-;;; CRC32
-(declaim (type (simple-array u32 (256)) +crc32-table+ +bzip2-crc32-table+))
+;;; CRC32 (bzip2 table moved to epsilon.lib.bzip)
+(declaim (type (simple-array u32 (256)) +crc32-table+))
 (define-constant +crc32-table+
   (coerce '(#x00000000 #x77073096 #xEE0E612C #x990951BA #x076DC419 #x706AF48F
             ...rest of table...
@@ -193,69 +193,6 @@
             #xB40BBE37 #xC30C8EA1 #x5A05DF1B #x2D02EF8D)
           '(vector u32)))
 
-(define-constant +bzip2-crc32-table+
-    (coerce '(#x00000000 #x04c11db7 #x09823b6e #x0d4326d9
-              ...entire bzip2 crc table...
-              #xbfd9c362 #xbb18ded5 #xb65b880c #xb29a9fbb)
-          '(vector u32)))
-
@@ -478,11 +415,6 @@
 
 ;;; Conditions
 
-(define-condition invalid-bzip2-data (simple-error)
-  ()
-  (:documentation "Signaled when invalid bzip2 data is found."))
-
 (define-condition invalid-zlib-header (simple-error)
   ()
   (:documentation "Signaled when an invalid zlib header is found."))
@@ -655,14 +587,12 @@
   "Return a structure suitable for passing to DECOMPRESS.  FORMAT
 should be:
 
-  :BZIP2    For decompressing data in the `bzip2' format;
   :DEFLATE  For decompressing data in the DEFLATE format;
   :GZIP     For decompressing data in the `gzip' format;
   :ZLIB     For decompressing data in the `zlib' format.
 
 The usual value of FORMAT will be :GZIP."
   (case format
-    ((:bzip2)
-     (make-bzip2-state))
     ((:deflate)
      (make-inflate-state format))
     ((:gzip)
@@ -698,7 +628,6 @@
   (let ((dfun (cond
                 ((inflate-state-p dstate) #'%inflate)
                 ((deflate-state-p dstate) #'%deflate)
-                (bzip2-state #'%bzip2-decompress)))
         (data-start (decompression-state-data-start dstate)))
     ...rest of function...
 
@@ -1610,230 +1539,6 @@
       collect (next-code state)
       finally (return (make-array n-lit :initial-contents codes))))
 
-;;; bzip2 decompression
-
-(defun reverse-ub4 (x)
-  ...entire bzip2 implementation...
-(defun reverse-u8 (x)
-  ...
-(defun reverse-ub16 (x)
-  ...
-
-(defstruct (bzip2-state
-  ...entire structure...
-)
-
-(defun make-maps (state)
-  ...
-(defun get-symbols (state group)
-  ...
-(defun undo-bzip2-rle-obuf-to-output (state)
-  ...
-(defun %bzip2-state-machine (state)
-  ...entire state machine...
-)
-
-(defun %bzip2-decompress (state input output &key ...)
-  ...
-(defun make-bzip2-state ()
-  ...
-
-(defclass bzip2-codec ()
-  ())
-
-(defmethod encode ((codec bzip2-codec) in out)
-  (error "unimplemented"))
-
-(defmethod decode ((codec bzip2-codec) in out)
-  (decompress out (make-dstate :bzip2) in))
-
 (defclass decompressing-stream (fundamental-binary-input-stream)
@@ -2580,8 +2285,6 @@
       (ecase format
         ((:deflate :zlib :gzip)
          (values (make-inflate-state format) #'%inflate))
-        ((:bzip2)
-         (values (make-bzip2-state) #'%bzip2-decompress)))
     (make-instance 'decompressing-stream
                    :stream stream
                    :dstate state
@@ -3329,8 +3032,6 @@
 
 (defun codec (format)
   (ecase format
-    (:bzip2 (make-instance 'bzip2-codec))
     (:deflate (make-instance 'deflate-codec))
     (:zlib (make-instance 'zlib-codec))
     (:gzip (make-instance 'gzip-codec))))