(defpackage #:lib.digest.generic
  (:use
   #:cl)
  (:export
   #:block-length
   #:digest-file
   #:digest-stream
   #:digest-sequence
   #:copy-digest
   #:update-digest
   #:produce-digest
   #:digest-length))

(in-package #:lib.digest.generic)

(defgeneric block-length (cipher)
  (:documentation "Return the number of bytes in an encryption or
decryption block for CIPHER.  CIPHER may either be a cipher name
as accepted by MAKE-CIPHER or a cipher object as returned by
MAKE-CIPHER.  NIL is returned if CIPHER does not name a known
cipher or is not a cipher object."))

(defgeneric digest-file (digest-spec pathname &rest args &key buffer start end digest digest-start)
  (:documentation "Return the digest of the contents of the file named by
PATHNAME using the algorithm DIGEST-NAME.

If DIGEST is provided, the digest will be placed into DIGEST starting
at DIGEST-START. DIGEST must be a ->u8. An error will be signaled if
there is insufficient room in DIGEST.

If BUFFER is provided, the portion of BUFFER between START and END will be used
to hold data read from the stream."))

(defgeneric digest-stream (digest-spec stream &rest args &key buffer start end digest digest-start)
  (:documentation "Return the digest of the contents of STREAM using the algorithm
DIGEST-NAME.  STREAM-ELEMENT-TYPE of STREAM should be (UNSIGNED-BYTE 8).

If DIGEST is provided, the digest will be placed into DIGEST starting at
DIGEST-START.  DIGEST must be a ->u8.
An error will be signaled if there is insufficient room in DIGEST.

If BUFFER is provided, the portion of BUFFER between START and END will
be used to hold data read from the stream."))

(defgeneric digest-sequence (digest-spec sequence &rest args &key start end digest digest-start)
  (:documentation "Return the digest of the subsequence of SEQUENCE
specified by START and END using the algorithm DIGEST-SPEC.
SEQUENCE can be any vector with an element-type of (UNSIGNED-BYTE 8).

If DIGEST is provided, the digest will be placed into DIGEST starting at
DIGEST-START.  DIGEST must be a ->u8.
An error will be signaled if there is insufficient room in DIGEST."))

(defgeneric copy-digest (digester &optional copy)
  (:documentation "Return a copy of DIGESTER.  If COPY is not NIL, it
should be of the same type as DIGESTER and will receive the copied data,
rather than creating a new object.  The copy is a deep copy, not a
shallow copy as might be returned by COPY-STRUCTURE."))

(defgeneric update-digest (digester thing &key &allow-other-keys)
  (:documentation "Update the internal state of DIGESTER with THING.
The exact method is determined by the type of THING."))

(defgeneric produce-digest (digester &key digest digest-start)
  (:documentation "Return the hash of the data processed by
DIGESTER so far.

If DIGEST is provided, the hash will be placed into DIGEST starting at
DIGEST-START.  DIGEST must be a ->u8.
An error will be signaled if there is insufficient room in DIGEST."))

(defgeneric digest-length (digest)
  (:documentation "Return the number of bytes in a digest generated by DIGEST."))
