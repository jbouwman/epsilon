(defpackage :epsilon.http.tls-integration.tests
  (:use :cl :epsilon.test)
  (:local-nicknames
   (#:client #:epsilon.http.client)
   (#:server #:epsilon.http.server)
   (#:request #:epsilon.http.request)
   (#:response #:epsilon.http.response)
   (#:tls #:epsilon.tls)
   (#:map #:epsilon.map)
   (#:str #:epsilon.string)
   (#:thread #:epsilon.sys.thread)))

(in-package :epsilon.http.tls-integration.tests)

(defparameter *test-tls-port* 18443
  "Port for HTTPS integration tests")

(defparameter *test-server* nil
  "Test HTTPS server instance")

(defun setup-test-handlers ()
  "Set up test HTTP handlers"
  ;; Simple echo handler
  (server:define-handler (:get "/echo") (req)
    (response:json-response 
     (map:make-map 
      "method" (request:request-method req)
      "path" (request:request-path req)
      "tls" "true")))
  
  ;; POST handler that echoes body
  (server:define-handler (:post "/echo") (req)
    (response:json-response
     (map:make-map
      "method" (request:request-method req)
      "path" (request:request-path req)
      "body" (or (request:request-body req) "")
      "tls" "true")))
  
  ;; Large response handler
  (server:define-handler (:get "/large") (req)
    (response:text-response (make-string 1000 :initial-element #\A)))
  
  ;; Headers test handler
  (server:define-handler (:get "/headers") (req)
    (response:make-response 
     :status 200
     :headers (map:make-map 
               "Content-Type" "text/plain"
               "X-Custom-Header" "test-value"
               "X-TLS-Server" "true")
     :body "Headers test over TLS"))
  
  ;; Error handler
  (server:define-handler (:get "/error") (req)
    (response:make-response :status 500
                           :headers (map:make-map "Content-Type" "text/plain")
                           :body "Internal Server Error (TLS)")))

(defun start-test-tls-server ()
  "Start a test HTTPS server for integration testing"
  (when *test-server*
    (server:stop-server *test-server*))
  
  ;; Create TLS context for testing
  (let ((tls-ctx (tls:create-tls-context :server-p t)))
    (tls:set-verify-mode tls-ctx tls:+tls-verify-none+)
    
    ;; Start server with TLS support (stubbed - no real certs needed)
    (setf *test-server* 
          (server:start-server :port *test-tls-port*
                              :tls-context tls-ctx
                              :ssl-p t))
    
    ;; Wait for server to be ready
    (sleep 0.1)))

(defun stop-test-tls-server ()
  "Stop the test HTTPS server"
  (when *test-server*
    (server:stop-server *test-server*)
    (setf *test-server* nil)))

(deftest test-https-basic-get ()
  "Test basic HTTPS GET request"
  (setup-test-handlers)
  (start-test-tls-server)
  (unwind-protect
       (multiple-value-bind (status headers body)
           (client:http-get (format nil "https://localhost:~D/echo" *test-tls-port*))
         (is-equal 200 status)
         (is-equal "application/json" (map:get headers "Content-Type"))
         (is (search "\"method\":\"GET\"" body))
         (is (search "\"path\":\"/echo\"" body))
         (is (search "\"tls\":\"true\"" body)))
    (stop-test-tls-server)))

(deftest test-https-post-with-body ()
  "Test HTTPS POST request with body"
  (setup-test-handlers)
  (start-test-tls-server)
  (unwind-protect
       (multiple-value-bind (status headers body)
           (client:http-post (format nil "https://localhost:~D/echo" *test-tls-port*)
                            :body "test payload"
                            :headers (map:make-map "Content-Type" "text/plain"))
         (is-equal 200 status)
         (is (search "\"method\":\"POST\"" body))
         (is (search "\"body\":\"test payload\"" body))
         (is (search "\"tls\":\"true\"" body)))
    (stop-test-tls-server)))

(deftest test-https-large-response ()
  "Test handling of large HTTPS responses"
  (setup-test-handlers)
  (start-test-tls-server)
  (unwind-protect
       (multiple-value-bind (status headers body)
           (client:http-get (format nil "https://localhost:~D/large" *test-tls-port*))
         (is-equal 200 status)
         (is-equal 1000 (length body))
         (is (every (lambda (c) (char= c #\A)) body)))
    (stop-test-tls-server)))

(deftest test-https-custom-headers ()
  "Test custom header transmission over HTTPS"
  (setup-test-handlers)
  (start-test-tls-server)
  (unwind-protect
       (multiple-value-bind (status headers body)
           (client:http-get (format nil "https://localhost:~D/headers" *test-tls-port*)
                           :headers (map:make-map "X-Test-Header" "client-value"))
         (is-equal 200 status)
         (is-equal "test-value" (map:get headers "X-Custom-Header"))
         (is-equal "true" (map:get headers "X-TLS-Server"))
         (is (search "Headers test over TLS" body)))
    (stop-test-tls-server)))

(deftest test-https-error-handling ()
  "Test HTTPS error response handling"
  (setup-test-handlers)
  (start-test-tls-server)
  (unwind-protect
       (multiple-value-bind (status headers body)
           (client:http-get (format nil "https://localhost:~D/error" *test-tls-port*))
         (is-equal 500 status)
         (is (search "Internal Server Error (TLS)" body)))
    (stop-test-tls-server)))

(deftest test-https-url-parsing ()
  "Test HTTPS URL parsing correctly identifies SSL"
  (multiple-value-bind (scheme host port path query)
      (client::parse-url "https://example.com:8443/secure/path?token=abc")
    (is-equal "https" scheme)
    (is-equal "example.com" host)
    (is-equal 8443 port)
    (is-equal "/secure/path" path)
    (is-equal "token=abc" query)))

(deftest test-mixed-http-https ()
  "Test that HTTP and HTTPS can be handled separately"
  ;; This test ensures that both HTTP and HTTPS work independently
  (multiple-value-bind (scheme1 host1 port1 path1 query1)
      (client::parse-url "http://example.com/insecure")
    (is-equal "http" scheme1)
    (is-equal 80 port1))
  
  (multiple-value-bind (scheme2 host2 port2 path2 query2)
      (client::parse-url "https://example.com/secure")
    (is-equal "https" scheme2)
    (is-equal 443 port2)))

(deftest test-tls-context-integration ()
  "Test TLS context is properly integrated with HTTP components"
  (let ((ctx (tls:create-tls-context :server-p t)))
    (is (tls:tls-context-p ctx))
    (is (tls:tls-context-server-p ctx))
    
    ;; Test loading certificate and key files (stub implementation)
    (tls:load-cert-file ctx "/test/cert.pem")
    (tls:load-key-file ctx "/test/key.pem") 
    (tls:set-verify-mode ctx tls:+tls-verify-none+)
    
    (is-equal "/test/cert.pem" (tls:tls-context-cert-file ctx))
    (is-equal "/test/key.pem" (tls:tls-context-key-file ctx))
    (is-equal tls:+tls-verify-none+ (tls:tls-context-verify-mode ctx))))

(deftest test-tls-server-configuration ()
  "Test TLS server can be configured with different options"
  ;; Test server with explicit TLS context
  (let ((ctx (tls:create-tls-context :server-p t)))
    (tls:set-verify-mode ctx tls:+tls-verify-none+)
    
    ;; Should not throw error when creating server with TLS context
    (is-not (handler-case
                (let ((srv (server:start-server :port (+ *test-tls-port* 1)
                                               :tls-context ctx
                                               :ssl-p t)))
                  (server:stop-server srv)
                  nil) ; Return nil if successful
              (error (e) e)))) ; Return error if failed
  
  ;; Test server with cert/key files
  (is-not (handler-case
              (let ((srv (server:start-server :port (+ *test-tls-port* 2)
                                             :cert-file "/test/cert.pem"
                                             :key-file "/test/key.pem"
                                             :ssl-p t)))
                (server:stop-server srv)
                nil)
            (error (e) e))))

;; Note: The following tests would require real network connections
;; and are disabled by default since they're integration tests

#|
(deftest test-real-https-connection ()
  "Test connection to real HTTPS server (disabled by default)"
  ;; This would test against a real HTTPS endpoint
  ;; (client:http-get "https://httpbin.org/get")
  (skip-test "Real network connection required"))

(deftest test-certificate-verification ()
  "Test certificate verification modes (disabled - requires real certs)"
  ;; This would test actual certificate verification
  (skip-test "Real certificates required"))
|#