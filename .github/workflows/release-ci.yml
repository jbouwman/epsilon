name: Release CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CACHE_VERSION: v1

jobs:
  # Build and test modules
  test-modules:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SBCL (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y sbcl git
        
      - name: Setup SBCL (macOS)
        if: runner.os == 'macOS'
        run: brew install sbcl
        
      - name: Setup SBCL (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install sbcl
          
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            module/*/target
            .epsilon-cache
          key: build-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ hashFiles('module/**/package.edn', 'module/**/*.lisp') }}
          restore-keys: |
            build-${{ env.CACHE_VERSION }}-${{ runner.os }}-
            
      - name: Run tests
        run: |
          ./epsilon test epsilon.core --format junit --file test-results.xml
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: test-results.xml

  # Build release artifacts
  build-release:
    needs: test-modules
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SBCL (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y sbcl zip git tar gzip
        
      - name: Setup SBCL (macOS)
        if: runner.os == 'macOS'
        run: brew install sbcl
        
      - name: Setup SBCL (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install sbcl zip
          
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="dev-$(git rev-parse --short HEAD)"
          fi
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
        shell: bash
        
      - name: Build release
        run: |
          # Build release for current platform only
          PLATFORM="${{ runner.os }}"
          case "$PLATFORM" in
            Linux) PLATFORM_SPEC="linux-x86-64" ;;
            macOS) PLATFORM_SPEC="darwin-x86-64,darwin-arm64" ;;
            Windows) PLATFORM_SPEC="windows-x86-64" ;;
          esac
          
          # Set TMPDIR for macOS tar compatibility
          export TMPDIR="${TMPDIR:-/tmp}"
          
          # First build the release module
          ./epsilon build epsilon.release
          
          ./epsilon release --version ${{ steps.version.outputs.version }} --platforms "$PLATFORM_SPEC"
        shell: bash
          
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ runner.os }}-${{ steps.version.outputs.version }}
          path: |
            target/release/*.tar.gz
            target/release/*.tar.gz.sha256
            target/release/epk/*.epk
            target/release/index.json

  # Publish release
  publish-release:
    needs: build-release
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release-*
          path: release-artifacts
          
      - name: Merge release artifacts
        run: |
          mkdir -p merged-release
          # List all downloaded artifacts for debugging
          echo "Downloaded artifacts:"
          find release-artifacts -type f -ls
          
          # Copy platform distributions
          find release-artifacts -type f -name "*.tar.gz*" -exec cp {} merged-release/ \;
          
          # Copy EPK packages
          find release-artifacts -type f -name "*.epk" -exec cp {} merged-release/ \;
          
          # Create combined index.json from all platforms
          echo '{"version":"1.0","packages":[]}' > merged-release/index.json
          
          echo "Merged artifacts:"
          ls -la merged-release/
          
      - name: Update GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: merged-release/*
          body: |
            ## Epsilon Release ${{ github.event.release.tag_name }}
            
            This release includes platform distributions and EPK packages.
            
            ### Installation
            ```bash
            # Download and extract for your platform
            curl -LO https://github.com/jbouwman/epsilon/releases/download/${{ github.event.release.tag_name }}/epsilon-${{ github.event.release.tag_name }}-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m).tar.gz
            tar xzf epsilon-*.tar.gz
            ```