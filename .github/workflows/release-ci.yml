name: Release CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CACHE_VERSION: v1

jobs:
  # Stage 1: Module Discovery and Validation
  discover:
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.modules.outputs.modules }}
      core-version: ${{ steps.versions.outputs.core }}
      release-tag: ${{ steps.versions.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SBCL
        run: |
          sudo apt-get update
          sudo apt-get install -y sbcl
          
      - name: Discover modules
        id: modules
        run: |
          # Generate module matrix from package.edn files
          MODULES=$(./scripts/ci/discover-modules.sh)
          echo "modules=$MODULES" >> $GITHUB_OUTPUT
          
      - name: Extract versions
        id: versions
        run: |
          CORE_VERSION=$(./scripts/ci/get-version.sh epsilon.core)
          echo "core=$CORE_VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

  # Stage 2: Platform Matrix Testing
  test-modules:
    needs: discover
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        module: ${{ fromJson(needs.discover.outputs.modules) }}
        exclude:
          # Platform-specific exclusions
          - os: ubuntu-latest
            module: darwin
          - os: ubuntu-latest  
            module: windows
          - os: macos-latest
            module: linux
          - os: macos-latest
            module: windows
          - os: windows-latest
            module: linux
          - os: windows-latest
            module: darwin
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SBCL (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y sbcl
        
      - name: Setup SBCL (macOS)
        if: runner.os == 'macOS'
        run: brew install sbcl
        
      - name: Setup SBCL (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install sbcl
          
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            module/*/target
            .epsilon-cache
          key: build-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.module }}-${{ hashFiles('module/${{ matrix.module }}/**/*.lisp', 'module/${{ matrix.module }}/package.edn') }}
          restore-keys: |
            build-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.module }}-
            build-${{ env.CACHE_VERSION }}-${{ runner.os }}-
            
      - name: Build module dependencies
        run: |
          # Build dependency chain for module
          ./scripts/ci/build-dependencies.sh ${{ matrix.module }}
          
      - name: Build module
        run: |
          ./run.sh build --module ${{ matrix.module }} --force
          
      - name: Run module tests
        run: |
          ./run.sh test --module ${{ matrix.module }} --format junit --file test-results-${{ matrix.module }}.xml
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.module }}
          path: test-results-${{ matrix.module }}.xml

  # Stage 3: Integration Testing
  integration-test:
    needs: [discover, test-modules]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SBCL
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y sbcl
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install sbcl
          else
            choco install sbcl
          fi
        shell: bash
        
      - name: Run full integration tests
        run: |
          ./scripts/ci/integration-test.sh
          
      - name: Run performance benchmarks
        run: |
          ./run.sh benchmark --suite all --format junit --file benchmark-results.xml
          
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results-${{ matrix.os }}
          path: benchmark-results.xml

  # Stage 4: EPK Compilation
  build-epks:
    needs: [discover, test-modules]
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SBCL
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y sbcl zip
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install sbcl
          else
            choco install sbcl zip
          fi
        shell: bash
        
      - name: Build all modules
        run: |
          # Build all compatible modules for this platform
          ./scripts/ci/build-all-modules.sh
          
      - name: Generate EPK packages
        run: |
          # Create EPK files for all modules
          ./scripts/ci/generate-epks.sh ${{ needs.discover.outputs.core-version }}
          
      - name: Upload EPK artifacts
        uses: actions/upload-artifact@v3
        with:
          name: epks-${{ runner.os }}-${{ needs.discover.outputs.core-version }}
          path: target/epk/*.epk

  # Stage 5: Release Publishing
  publish-release:
    needs: [discover, test-modules, integration-test, build-epks]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all EPK artifacts
        uses: actions/download-artifact@v3
        with:
          pattern: epks-*
          path: release-artifacts
          
      - name: Setup release repository
        run: |
          # Clone or setup release repository
          ./scripts/ci/setup-release-repo.sh ${{ needs.discover.outputs.release-tag }}
          
      - name: Generate release index
        run: |
          # Create/update package index with new versions
          ./scripts/ci/generate-release-index.sh ${{ needs.discover.outputs.core-version }}
          
      - name: Publish to release repository
        env:
          RELEASE_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          # Push EPKs and index to release repository
          ./scripts/ci/publish-release.sh ${{ needs.discover.outputs.release-tag }}
          
      - name: Update GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: release-artifacts/**/*.epk
          body: |
            ## Epsilon Release ${{ needs.discover.outputs.core-version }}
            
            This release includes EPK packages for all platforms and modules.
            
            ### Installation
            ```bash
            # Download and install core package
            epsilon-package install epsilon.core@${{ needs.discover.outputs.core-version }}
            ```
            
            ### Module Packages Included
            ${{ needs.discover.outputs.modules }}

  # Stage 6: Cleanup and Notifications
  notify:
    needs: [publish-release]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify success
        if: needs.publish-release.result == 'success'
        run: |
          echo "✅ Release ${{ needs.discover.outputs.core-version }} published successfully"
          
      - name: Notify failure
        if: needs.publish-release.result == 'failure'
        run: |
          echo "❌ Release ${{ needs.discover.outputs.core-version }} failed"
          exit 1