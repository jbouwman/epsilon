name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CACHE_VERSION: v1

jobs:
  # Run tests for all packages
  test:
    name: Test All Packages (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            container: ghcr.io/${{ github.repository }}/epsilon-ci:latest
          - os: macos-latest
            container: null
    
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup environment (Container)
      if: matrix.container
      run: |
        # Verify OpenSSL version (should be 3.0 on Ubuntu 22.04)
        openssl version
        # Configure git for the CI environment
        git config --global --add safe.directory /__w/epsilon/epsilon
    
    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install sbcl
        brew install libffi
        # Install OpenSSL 3.x (Homebrew typically has 3.x)
        brew install openssl@3
        # Link OpenSSL 3 so it's found by default
        brew link openssl@3 --force
        # Verify OpenSSL version
        openssl version
        
    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          src/*/target
          .epsilon-cache
          modules/foreign/lib
        key: build-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ hashFiles('src/**/package.lisp', 'src/**/*.lisp', 'modules/foreign/c/*') }}
        restore-keys: |
          build-${{ env.CACHE_VERSION }}-${{ runner.os }}-
    
    - name: Build libffi extension
      run: |
        echo "=== Building libffi extension ==="
        cd modules/foreign/c
        make clean
        make
        ls -la ../lib/
        
    - name: Verify OpenSSL setup
      run: |
        echo "=== OpenSSL Configuration ==="
        openssl version
        echo "=== Checking for OpenSSL libraries ==="
        # On Linux
        if [ -f /usr/lib/x86_64-linux-gnu/libssl.so ]; then
          echo "Found libssl.so"
          ls -la /usr/lib/x86_64-linux-gnu/libssl* | head -5
        fi
        # On macOS
        if [ -d /opt/homebrew/opt/openssl@3 ]; then
          echo "Found Homebrew OpenSSL 3"
          ls -la /opt/homebrew/opt/openssl@3/lib/libssl* | head -5
        elif [ -d /usr/local/opt/openssl@3 ]; then
          echo "Found Homebrew OpenSSL 3 (Intel)"
          ls -la /usr/local/opt/openssl@3/lib/libssl* | head -5
        fi
    
    - name: Run tests for all packages
      run: |
        echo "=== Testing all epsilon packages ==="
        # Set library paths for OpenSSL on macOS
        if [ "${{ runner.os }}" = "macOS" ]; then
          if [ -d /opt/homebrew/opt/openssl@3 ]; then
            export DYLD_LIBRARY_PATH="/opt/homebrew/opt/openssl@3/lib:${DYLD_LIBRARY_PATH:-}"
          elif [ -d /usr/local/opt/openssl@3 ]; then
            export DYLD_LIBRARY_PATH="/usr/local/opt/openssl@3/lib:${DYLD_LIBRARY_PATH:-}"
          fi
        fi
        ./epsilon --exec epsilon.release:selftest --format junit --file "target/TEST-epsilon-${{ runner.os }}.xml"
        
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v5
      if: success() || failure()
      with:
        report_paths: '**/TEST-*.xml'
        check_name: 'Test Results (${{ runner.os }})'
        job_summary: true
        detailed_summary: true
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test-results-${{ runner.os }}
        path: target/TEST-*.xml
        
    - name: Check test coverage
      if: success()
      run: |
        echo "=== Test Summary ==="
        # Show which packages were tested
        find src -name "package.lisp" -type f | while read pkg; do
          dir=$(dirname "$pkg")
          module=$(basename $(dirname "$dir"))
          if [ -d "$dir/tests" ]; then
            echo "✓ $module - has tests"
          else
            echo "⚠ $module - no tests found"
          fi
        done