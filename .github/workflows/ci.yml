name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-linux:
    runs-on: ubuntu-latest
    container: ghcr.io/${{ github.repository }}/epsilon-ci:latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build and run tests
      run: |
        chmod +x run.sh
        ./run.sh build epsilon.core
        ./run.sh test epsilon.core --format junit

    - name: Rename test results for platform identification
      if: success() || failure()
      run: |
        if [ -f target/TEST-epsilon.xml ]; then
          mv target/TEST-epsilon.xml target/TEST-epsilon-linux.xml
        fi

    - name: Publish Test Report (Linux)
      uses: mikepenz/action-junit-report@v5
      if: success() || failure()
      with:
        report_paths: '**/TEST-epsilon-linux.xml'
        check_name: 'Test Results (Linux)'
        job_summary: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test-results-linux
        path: target/TEST-epsilon-linux.xml

    - name: Test runtime build
      run: |
        chmod +x scripts/build-runtime.sh
        ./scripts/build-runtime.sh
        
        # Test the built runtime
        mkdir -p test-runtime
        cd test-runtime
        tar -xzf ../target/epsilon-*.tar.gz
        ./epsilon --eval "(format t \"~%CI test successful!~%\")" --eval "(sb-ext:quit)"

  test-macos:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache SBCL installation
      id: cache-sbcl
      uses: actions/cache@v4
      with:
        path: |
          /opt/homebrew/bin/sbcl
          /opt/homebrew/lib/sbcl
          /usr/local/bin/sbcl
          /usr/local/lib/sbcl
        key: ${{ runner.os }}-sbcl-${{ hashFiles('.github/workflows/ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-sbcl-

    - name: Install SBCL
      if: steps.cache-sbcl.outputs.cache-hit != 'true'
      run: |
        brew install sbcl

    - name: Build and run tests
      run: |
        chmod +x run.sh
        ./run.sh build epsilon.core
        ./run.sh test epsilon.core --format junit

    - name: Rename test results for platform identification
      if: success() || failure()
      run: |
        if [ -f target/TEST-epsilon.xml ]; then
          mv target/TEST-epsilon.xml target/TEST-epsilon-macos.xml
        fi

    - name: Publish Test Report (macOS)
      uses: mikepenz/action-junit-report@v5
      if: success() || failure()
      with:
        report_paths: '**/TEST-epsilon-macos.xml'
        check_name: 'Test Results (macOS)'
        job_summary: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test-results-macos
        path: target/TEST-epsilon-macos.xml

    - name: Test runtime build
      run: |
        chmod +x scripts/build-runtime.sh
        ./scripts/build-runtime.sh
        
        # Test the built runtime
        mkdir -p test-runtime
        cd test-runtime
        tar -xzf ../target/epsilon-*.tar.gz
        ./epsilon --eval "(format t \"~%CI test successful!~%\")" --eval "(sb-ext:quit)"

  test-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache SBCL installation
      id: cache-sbcl-win
      uses: actions/cache@v4
      with:
        path: C:\Program Files\Steel Bank Common Lisp
        key: ${{ runner.os }}-sbcl-2.4.0
        restore-keys: |
          ${{ runner.os }}-sbcl-

    - name: Install SBCL
      if: steps.cache-sbcl-win.outputs.cache-hit != 'true'
      run: |
        choco install sbcl

    - name: Build and run tests
      shell: cmd
      run: |
        echo "Testing SBCL and platform detection..."
        sbcl --version
        sbcl --eval "(format t \"~&Platform features: ~A~%\" *features*)" --eval "(sb-ext:quit)"
        echo "Running build..."
        sbcl --noinform --non-interactive --no-sysinit --no-userinit --load "scripts/epsilon.lisp" --eval "(epsilon.tool.dev:main)" build epsilon.core
        echo "Running tests..."
        sbcl --noinform --non-interactive --no-sysinit --no-userinit --load "scripts/epsilon.lisp" --eval "(epsilon.tool.dev:main)" test epsilon.core --format junit

    - name: Rename test results for platform identification
      if: success() || failure()
      shell: powershell
      run: |
        if (Test-Path target\TEST-epsilon.xml) {
          Move-Item target\TEST-epsilon.xml target\TEST-epsilon-windows.xml
        }

    - name: Publish Test Report (Windows)
      uses: mikepenz/action-junit-report@v5
      if: success() || failure()
      with:
        report_paths: '**/TEST-epsilon-windows.xml'
        check_name: 'Test Results (Windows)'
        job_summary: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test-results-windows
        path: target/TEST-epsilon-windows.xml

    - name: Test runtime build
      shell: powershell
      run: |
        Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
        powershell -ExecutionPolicy Bypass -File .\scripts\build-runtime-windows.ps1
        
        # Test the built runtime
        mkdir test-runtime
        cd test-runtime
        Expand-Archive -Path ..\target\epsilon-*.zip -DestinationPath .
        .\epsilon.exe --eval "(format t \"~%CI test successful!~%\")" --eval "(sb-ext:quit)"