name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-linux:
    runs-on: ubuntu-latest
    container: ghcr.io/${{ github.repository }}/epsilon-ci:latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install required tools
      run: |
        apt-get update && apt-get install -y git tar gzip
    
    - name: Configure git safe directory
      run: |
        git config --global --add safe.directory /__w/epsilon/epsilon

    - name: Run tests
      run: |
        ./epsilon test --format junit

    - name: Rename test results for platform identification
      if: success() || failure()
      run: |
        if [ -f target/TEST-epsilon.xml ]; then
          mv target/TEST-epsilon.xml target/TEST-epsilon-linux.xml
        fi

    - name: Publish Test Report (Linux)
      uses: mikepenz/action-junit-report@v5
      if: success() || failure()
      with:
        report_paths: '**/TEST-epsilon-linux.xml'
        check_name: 'Test Results (Linux)'
        job_summary: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test-results-linux
        path: target/TEST-epsilon-linux.xml

    - name: Build release package
      run: |
        # Configure git safe directory (needed in container)
        git config --global --add safe.directory /__w/epsilon/epsilon || true
        
        # Set TMPDIR for tar compatibility
        export TMPDIR="${TMPDIR:-/tmp}"
        
        # Get short commit hash for version
        VERSION="dev-$(git rev-parse --short HEAD)"
        
        # First build the release module
        ./epsilon build epsilon.release
        
        # Build release with EPK for Linux platform
        ./epsilon release --version "$VERSION" --platforms linux-x86-64
        
        # List generated artifacts
        echo "Generated artifacts:"
        find target/release -type f -ls
    
    - name: Test release package
      run: |
        # Extract and test EPK
        if [ -f target/release/epk/*.epk ]; then
          echo "Found EPK file:"
          ls -la target/release/epk/*.epk
        fi

  test-macos:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install SBCL
      run: |
        brew install sbcl

    - name: Run all tests
      run: |
        ./epsilon test --format junit

    - name: Rename test results for platform identification
      if: success() || failure()
      run: |
        if [ -f target/TEST-epsilon.xml ]; then
          mv target/TEST-epsilon.xml target/TEST-epsilon-macos.xml
        fi

    - name: Publish Test Report (macOS)
      uses: mikepenz/action-junit-report@v5
      if: success() || failure()
      with:
        report_paths: '**/TEST-epsilon-macos.xml'
        check_name: 'Test Results (macOS)'
        job_summary: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test-results-macos
        path: target/TEST-epsilon-macos.xml

    - name: Build release package
      run: |
        # Set TMPDIR for tar compatibility
        export TMPDIR="${TMPDIR:-/tmp}"
        
        # Get short commit hash for version
        VERSION="dev-$(git rev-parse --short HEAD)"
        
        # First build the release module
        ./epsilon build epsilon.release
        
        # Build release with EPK for macOS platforms
        ./epsilon release --version "$VERSION" --platforms darwin-x86-64,darwin-arm64
        
        # List generated artifacts
        echo "Generated artifacts:"
        find target/release -type f -ls
    
    - name: Test release package
      run: |
        # Extract and test EPK
        if [ -f target/release/epk/*.epk ]; then
          echo "Found EPK file:"
          ls -la target/release/epk/*.epk
        fi

  test-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install SBCL
      run: choco install sbcl

    - name: Run all tests
      shell: pwsh
      run: |
        .\epsilon test --format junit

    - name: Rename test results for platform identification
      if: success() || failure()
      shell: pwsh
      run: |
        if (Test-Path "target/TEST-epsilon.xml") {
          Move-Item "target/TEST-epsilon.xml" "target/TEST-epsilon-windows.xml"
        }

    - name: Publish Test Report (windows)
      uses: mikepenz/action-junit-report@v5
      if: success() || failure()
      with:
        report_paths: '**/TEST-epsilon-windows.xml'
        check_name: 'Test Results (Windows)'
        job_summary: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test-results-windows
        path: target/TEST-epsilon-windows.xml
    
    - name: Build release package
      shell: bash
      run: |
        # Get short commit hash for version
        VERSION="dev-$(git rev-parse --short HEAD)"
        
        # First build the release module
        ./epsilon build epsilon.release
        
        # Build release with EPK for Windows platform
        ./epsilon release --version "$VERSION" --platforms windows-x86-64
        
        # List generated artifacts
        echo "Generated artifacts:"
        find target/release -type f -ls
    
    - name: Test release package
      shell: bash
      run: |
        # Extract and test EPK
        if [ -f target/release/epk/*.epk ]; then
          echo "Found EPK file:"
          ls -la target/release/epk/*.epk
        fi

