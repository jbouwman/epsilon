name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  checks: write
  id-token: write

env:
  CACHE_VERSION: v1

jobs:
  # Run tests for all packages
  test:
    name: Test All Packages (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            container: ghcr.io/${{ github.repository }}/epsilon-ci:latest
          - os: macos-latest
            container: null
          - os: windows-latest
            container: null
    
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup CI environment (Unix)
      if: runner.os != 'Windows'
      run: ./scripts/ci-setup.sh
      
    - name: Setup SBCL (Windows)
      if: runner.os == 'Windows'
      run: |
        # Download and install SBCL for Windows
        $sbclVersion = "2.4.11"
        $url = "https://github.com/sbcl/sbcl/releases/download/sbcl-$sbclVersion/sbcl-$sbclVersion-x86-64-windows-binary.msi"
        $installerPath = "$env:TEMP\sbcl-installer.msi"
        
        Write-Host "Downloading SBCL $sbclVersion..."
        Invoke-WebRequest -Uri $url -OutFile $installerPath
        
        Write-Host "Installing SBCL..."
        Start-Process msiexec.exe -ArgumentList "/i", $installerPath, "/quiet", "/norestart" -Wait
        
        # Add SBCL to PATH for this session and future steps
        $sbclPath = "C:\Program Files\Steel Bank Common Lisp"
        $env:PATH = "$sbclPath;$env:PATH"
        echo "$sbclPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # Verify installation
        Write-Host "Verifying SBCL installation..."
        & "$sbclPath\sbcl.exe" --version
      shell: powershell
      
    - name: Setup CI environment (Windows)  
      if: runner.os == 'Windows'
      run: .\scripts\ci-setup.ps1
      shell: powershell
        
    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          src/*/target
          .epsilon-cache
          modules/foreign/lib
        key: build-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ hashFiles('src/**/package.lisp', 'src/**/*.lisp', 'modules/foreign/c/*') }}
        restore-keys: |
          build-${{ env.CACHE_VERSION }}-${{ runner.os }}-
    
    - name: Verify OpenSSL setup
      run: |
        echo "=== OpenSSL Configuration ==="
        openssl version
        echo "=== Checking for OpenSSL libraries ==="
        # On Linux
        if [ -f /usr/lib/x86_64-linux-gnu/libssl.so ]; then
          echo "Found libssl.so"
          ls -la /usr/lib/x86_64-linux-gnu/libssl* | head -5
        fi
        # On macOS
        if [ -d /opt/homebrew/opt/openssl@3 ]; then
          echo "Found Homebrew OpenSSL 3"
          ls -la /opt/homebrew/opt/openssl@3/lib/libssl* | head -5
        elif [ -d /usr/local/opt/openssl@3 ]; then
          echo "Found Homebrew OpenSSL 3 (Intel)"
          ls -la /usr/local/opt/openssl@3/lib/libssl* | head -5
        fi
    
    - name: Verify SQLite setup
      run: |
        echo "=== SQLite Configuration ==="
        sqlite3 --version
        echo "=== Checking for SQLite libraries ==="
        # On Linux
        if [ -f /usr/lib/x86_64-linux-gnu/libsqlite3.so ]; then
          echo "Found libsqlite3.so"
          ls -la /usr/lib/x86_64-linux-gnu/libsqlite3* | head -5
        fi
        # On macOS - SQLite is bundled with the system
        if [ "${{ runner.os }}" = "macOS" ]; then
          echo "macOS system SQLite libraries:"
          # Check common locations for system SQLite
          if [ -f /usr/lib/libsqlite3.dylib ]; then
            echo "Found system libsqlite3.dylib"
            ls -la /usr/lib/libsqlite3* 2>/dev/null | head -5 || true
          fi
          # Also check SDK location
          if [ -d /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib ]; then
            echo "Found SDK SQLite libraries:"
            ls -la /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib/libsqlite3* 2>/dev/null | head -5 || true
          fi
          # Check with otool where sqlite3 binary links to
          echo "SQLite3 binary links to:"
          otool -L $(which sqlite3) | grep sqlite || true
        fi
    
    - name: Run smoke tests (Unix)
      if: runner.os != 'Windows'
      run: ./epsilon --exec epsilon.release:run-smoke-tests
      
    - name: Run smoke tests (Windows)
      if: runner.os == 'Windows'
      run: .\epsilon.ps1 --exec "epsilon.release:run-smoke-tests"
      shell: powershell
      
    - name: Run all module tests (Unix)
      if: runner.os != 'Windows'
      run: |
        # Set library paths for OpenSSL on macOS
        if [ "${{ runner.os }}" = "macOS" ]; then
          if [ -d /opt/homebrew/opt/openssl@3 ]; then
            export DYLD_LIBRARY_PATH="/opt/homebrew/opt/openssl@3/lib:${DYLD_LIBRARY_PATH:-}"
          elif [ -d /usr/local/opt/openssl@3 ]; then
            export DYLD_LIBRARY_PATH="/usr/local/opt/openssl@3/lib:${DYLD_LIBRARY_PATH:-}"
          fi
        fi
        ./epsilon --exec epsilon.release:test --format junit --output "target/TEST-epsilon-${{ runner.os }}.xml"
        
    - name: Run all module tests (Windows)
      if: runner.os == 'Windows'
      run: |
        # Create target directory if it doesn't exist
        if (-not (Test-Path "target")) { New-Item -ItemType Directory -Path "target" }
        .\epsilon.ps1 --exec "epsilon.release:test" --format "junit" --output "target/TEST-epsilon-${{ runner.os }}.xml"
      shell: powershell
        
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v5
      if: success() || failure()
      with:
        report_paths: '**/TEST-*.xml'
        check_name: 'Test Results (${{ runner.os }})'
        job_summary: true
        detailed_summary: true
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test-results-${{ runner.os }}
        path: target/TEST-*.xml
