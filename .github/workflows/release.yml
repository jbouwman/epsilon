name: Release - Build Distributable Packages

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SBCL_VERSION: '2.4.0'

jobs:
  build-release:
    strategy:
      matrix:
        include:
          - platform: linux
            container: ghcr.io/${{ github.repository }}/epsilon-linux:latest
            artifact-name: epsilon-linux-x64
            build-action: native
            
          - platform: darwin
            container: ghcr.io/${{ github.repository }}/epsilon-darwin:latest
            artifact-name: epsilon-darwin-x64
            build-action: package
            
          - platform: windows
            container: ghcr.io/${{ github.repository }}/epsilon-windows:latest
            artifact-name: epsilon-windows-x64
            build-action: package
    
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify SBCL installation
      run: |
        sbcl --version
        which sbcl
        echo "Container: ${{ matrix.container }}"
        
    - name: Build for Linux (native)
      if: matrix.build-action == 'native'
      run: |
        chmod +x run.sh
        ./run.sh build --platform core
        ./run.sh build --platform ${{ matrix.platform }}
        ./run.sh test --platform ${{ matrix.platform }} || echo "Tests completed with warnings"
        
        # Create distribution
        mkdir -p dist/${{ matrix.artifact-name }}
        cp -r src-core dist/${{ matrix.artifact-name }}/
        cp -r src-${{ matrix.platform }} dist/${{ matrix.artifact-name }}/src-platform
        cp -r tests-core dist/${{ matrix.artifact-name }}/
        cp -r tests-${{ matrix.platform }} dist/${{ matrix.artifact-name }}/tests-platform
        cp package-core.yaml dist/${{ matrix.artifact-name }}/
        cp package-${{ matrix.platform }}.yaml dist/${{ matrix.artifact-name }}/package.yaml
        
        if [ -d target ]; then
          cp -r target dist/${{ matrix.artifact-name }}/
        fi
        
        cp README.md LICENSE CLAUDE.md run.sh dist/${{ matrix.artifact-name }}/
        
        # Create platform info
        echo "Platform: ${{ matrix.platform }}" > dist/${{ matrix.artifact-name }}/PLATFORM.txt
        echo "SBCL Version: ${{ env.SBCL_VERSION }}" >> dist/${{ matrix.artifact-name }}/PLATFORM.txt
        echo "Build Date: $(date -u)" >> dist/${{ matrix.artifact-name }}/PLATFORM.txt
        echo "Architecture: x86-64" >> dist/${{ matrix.artifact-name }}/PLATFORM.txt
        echo "Build Type: Native (epoll networking)" >> dist/${{ matrix.artifact-name }}/PLATFORM.txt
        
        cd dist && tar -czf ${{ matrix.artifact-name }}.tar.gz ${{ matrix.artifact-name }}
        
    - name: Build package (Darwin/Windows)
      if: matrix.build-action == 'package'
      run: |
        epsilon-build ${{ matrix.platform }} ${{ env.SBCL_VERSION }} package
        
        # The epsilon-build script creates packages in dist/
        if [ "${{ matrix.platform }}" = "darwin" ]; then
          echo "Darwin package created: dist/epsilon-darwin-x64.tar.gz"
          # Rename to match expected artifact name
          mv dist/epsilon-darwin-x64.tar.gz dist/${{ matrix.artifact-name }}.tar.gz
        elif [ "${{ matrix.platform }}" = "windows" ]; then
          echo "Windows package created: dist/epsilon-windows-x64.zip"
          # Rename to match expected artifact name  
          mv dist/epsilon-windows-x64.zip dist/${{ matrix.artifact-name }}.zip
        fi
        
    - name: Upload release artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact-name }}
        path: |
          dist/${{ matrix.artifact-name }}.tar.gz
          dist/${{ matrix.artifact-name }}.zip
        retention-days: 30
        
    - name: Upload to release (if release event)
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: dist/${{ matrix.artifact-name }}.${{ matrix.platform == 'windows' && 'zip' || 'tar.gz' }}
        asset_name: ${{ matrix.artifact-name }}.${{ matrix.platform == 'windows' && 'zip' || 'tar.gz' }}
        asset_content_type: ${{ matrix.platform == 'windows' && 'application/zip' || 'application/gzip' }}

  # Create a combined source release using container
  source-release:
    runs-on: ubuntu-latest
    container: ghcr.io/${{ github.repository }}/epsilon-linux:latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create source distribution
      run: |
        mkdir -p dist/epsilon-source
        
        # Copy all source files
        cp -r src-core src-darwin src-linux src-windows dist/epsilon-source/
        cp -r tests-core tests-darwin tests-linux tests-windows dist/epsilon-source/
        
        # Copy Docker configurations
        cp -r .docker dist/epsilon-source/
        
        # Copy CI/CD configurations
        cp -r .github dist/epsilon-source/
        
        # Copy documentation (if exists)
        [ -d docs ] && cp -r docs dist/epsilon-source/ || echo "No docs directory"
        [ -d etc ] && cp -r etc dist/epsilon-source/ || echo "No etc directory"
        
        # Copy package files
        cp package*.yaml dist/epsilon-source/
        
        # Copy project files
        cp README.md LICENSE CLAUDE.md run.sh dist/epsilon-source/
        [ -f BACKLOG.md ] && cp BACKLOG.md dist/epsilon-source/ || echo "No BACKLOG.md"
        [ -f Dockerfile ] && cp Dockerfile dist/epsilon-source/ || echo "No root Dockerfile"
        
        # Create source info
        cat > dist/epsilon-source/SOURCE_INFO.txt << EOF
Epsilon Complete Source Distribution
===================================

This archive contains the complete epsilon source code for all platforms.

Contents:
- src-core/: Platform-agnostic core functionality  
- src-darwin/: macOS/Darwin platform code (kqueue networking)
- src-linux/: Linux platform code (epoll networking)
- src-windows/: Windows platform code (IOCP networking)
- tests-*/: Test suites for each platform
- .docker/: Container configurations for builds
- .github/: CI/CD workflows
- package*.yaml: Package specifications for each platform

Build Instructions:
1. Choose your platform's package file (e.g., package-linux.yaml)
2. Run: ./run.sh build --platform [linux|darwin|windows]
3. Run tests: ./run.sh test --platform [platform]

For containerized builds, see .docker/ directory and .github/workflows/

Release Date: $(date -u)
Container: epsilon-linux
EOF
        
        # Create source archive
        cd dist
        tar -czf epsilon-source.tar.gz epsilon-source
        
    - name: Upload source to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: dist/epsilon-source.tar.gz
        asset_name: epsilon-source.tar.gz
        asset_content_type: application/gzip