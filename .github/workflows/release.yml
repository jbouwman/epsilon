name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Semantic versioning tags only
  release:
    types: [published]

jobs:
  # Build release artifacts for all platforms
  build-release:
    name: Build Release (${{ matrix.os }})
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            container: ghcr.io/${{ github.repository }}/epsilon-ci:latest
          - os: macos-latest
            platform: darwin
            arch: arm64
          - os: macos-13
            platform: darwin
            arch: x86_64
          # Windows can be added when ready
          # - os: windows-latest
          #   platform: windows
          #   arch: x86_64
            
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup build environment
      shell: bash
      run: |
        # Container setup for Linux
        if [ -n "${{ matrix.container }}" ]; then
          apt-get update && apt-get install -y git tar gzip xz-utils
          git config --global --add safe.directory /__w/epsilon/epsilon
        fi
        
        # macOS setup
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          brew install sbcl || true
        fi
        
        # Set TMPDIR for tar compatibility
        export TMPDIR="${TMPDIR:-/tmp}"
        
    - name: Extract version from tag
      id: version
      shell: bash
      run: |
        # Use VERSION file since our release script enforces consistency
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION)
        else
          # Fallback: extract from tag (POSIX-compliant)
          if echo "${GITHUB_REF}" | grep -q '^refs/tags/v'; then
            VERSION=$(echo "${GITHUB_REF}" | sed 's|refs/tags/v||')
          else
            VERSION="0.0.0-dev"
          fi
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building version: ${VERSION}"
        
    - name: Run all tests before release
      shell: bash
      run: |
        echo "=== Running all tests before building release ==="
        ./scripts/test.sh || {
          echo "Tests failed - aborting release"
          exit 1
        }
        
    - name: Build runtime executable
      shell: bash
      run: |
        echo "=== Building epsilon runtime for ${{ matrix.platform }}-${{ matrix.arch }} ==="
        
        # Build the release module first
        ./epsilon build epsilon.release
        
        # Build the runtime executable
        ./scripts/package.sh "${{ matrix.platform }}" "${{ matrix.arch }}"
        
    - name: Build distribution package
      shell: bash
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Create distribution archive using epsilon.release:generate
        # Note: This builds for the current platform only
        ./epsilon --exec epsilon.release:generate -- "${VERSION}"
        
        # List generated artifacts
        echo "=== Generated artifacts ==="
        find releases -type f -name "*.tar.gz" -o -name "*.sha256" | sort
        
    - name: Test runtime executable
      shell: bash
      run: |
        # Extract and test the runtime
        TARBALL=$(find releases -name "epsilon-*.tar.gz" | head -1)
        if [ -f "$TARBALL" ]; then
          tar -xzf "$TARBALL"
          # The directory name should match the tarball name without .tar.gz
          DIR_NAME=$(basename "$TARBALL" .tar.gz)
          ./"$DIR_NAME"/epsilon version
          ./"$DIR_NAME"/epsilon test epsilon.core
        fi
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: epsilon-${{ steps.version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          releases/epsilon-*.tar.gz
          releases/epsilon-*.tar.gz.sha256
          releases/epk/*.epk

  # Create GitHub release with all artifacts
  publish-release:
    name: Publish Release
    needs: build-release
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts
        
    - name: Prepare release assets
      run: |
        mkdir -p release-files
        
        # Collect all distribution files
        find release-artifacts -type f \( -name "*.tar.gz" -o -name "*.sha256" -o -name "*.epk" \) -exec cp {} release-files/ \;
        
        # Generate release notes
        VERSION="${GITHUB_REF#refs/tags/v}"
        cat > release-files/RELEASE_NOTES.md << EOF
        ## Epsilon ${VERSION}
        
        ### Installation
        
        Download the appropriate archive for your platform and extract it:
        
        \`\`\`bash
        # Linux x86_64
        curl -LO https://github.com/jbouwman/epsilon/releases/download/v${VERSION}/epsilon-${VERSION}-linux-x86_64.tar.gz
        tar xzf epsilon-${VERSION}-linux-x86_64.tar.gz
        
        # macOS ARM64 (M1/M2)
        curl -LO https://github.com/jbouwman/epsilon/releases/download/v${VERSION}/epsilon-${VERSION}-darwin-arm64.tar.gz
        tar xzf epsilon-${VERSION}-darwin-arm64.tar.gz
        
        # macOS x86_64 (Intel)
        curl -LO https://github.com/jbouwman/epsilon/releases/download/v${VERSION}/epsilon-${VERSION}-darwin-x86_64.tar.gz
        tar xzf epsilon-${VERSION}-darwin-x86_64.tar.gz
        \`\`\`
        
        ### Verify checksums
        
        \`\`\`bash
        sha256sum -c epsilon-${VERSION}-<platform>.tar.gz.sha256
        \`\`\`
        
        ### What's New
        
        See [CHANGELOG.md](https://github.com/jbouwman/epsilon/blob/v${VERSION}/CHANGELOG.md) for details.
        EOF
        
        # List all files to be released
        echo "=== Release files ==="
        ls -la release-files/
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        files: release-files/*
        body_path: release-files/RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
        generate_release_notes: true