name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Semantic versioning tags only
  release:
    types: [published]

jobs:
  # Build release artifacts for all platforms
  build-release:
    name: Build Release (${{ matrix.os }})
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            container: ghcr.io/${{ github.repository }}/epsilon-ci:latest
          - os: macos-latest
            platform: darwin
            arch: arm64
          - os: macos-13
            platform: darwin
            arch: x86_64
          - os: windows-latest
            platform: windows
            arch: x86_64
            
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SBCL (Windows)
      if: matrix.platform == 'windows'
      run: |
        winget install --id SteelBankCommonLisp.SBCL --silent --accept-package-agreements --accept-source-agreements
        echo "C:\Program Files\Steel Bank Common Lisp" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: powershell
      
    - name: Setup CI environment (Unix)
      if: matrix.platform != 'windows'
      shell: bash
      run: ./scripts/ci-setup.sh
      
    - name: Setup CI environment (Windows)
      if: matrix.platform == 'windows'
      shell: powershell
      run: .\scripts\ci-setup.ps1
        
    - name: Extract version (Unix)
      if: matrix.platform != 'windows'
      id: version-unix
      shell: bash
      run: |
        VERSION=$(./epsilon --exec epsilon.release:version)
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building version: ${VERSION}"
        
    - name: Extract version (Windows)
      if: matrix.platform == 'windows'
      id: version-windows
      shell: powershell
      run: |
        $VERSION = & ".\epsilon.ps1" --exec "epsilon.release:version"
        echo "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        Write-Host "Building version: $VERSION"
        
    - name: Run tests (Unix)
      if: matrix.platform != 'windows'
      shell: bash
      run: |
        ./epsilon --exec epsilon.release:run-smoke-tests
        ./epsilon --exec epsilon.release:test
        
    - name: Run tests (Windows)
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        .\epsilon.ps1 --exec "epsilon.release:run-smoke-tests"
        .\epsilon.ps1 --exec "epsilon.release:test"
        
    - name: Build release package (Unix)
      if: matrix.platform != 'windows'
      shell: bash
      run: |
        VERSION="${{ steps.version-unix.outputs.version }}"
        ./epsilon --exec epsilon.release:create-package --version "${VERSION}"
        
    - name: Build release package (Windows)
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        $VERSION = "${{ steps.version-windows.outputs.version }}"
        .\epsilon.ps1 --exec "epsilon.release:create-package" --version "$VERSION"
        
    - name: Verify release (Unix)
      if: matrix.platform != 'windows'
      shell: bash
      run: ./epsilon --exec epsilon.release:verify
      
    - name: Verify release (Windows)
      if: matrix.platform == 'windows'
      shell: powershell
      run: .\epsilon.ps1 --exec "epsilon.release:verify"
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: epsilon-${{ steps.version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          releases/epsilon-*.tar.gz
          releases/epsilon-*.tar.gz.sha256
          releases/epk/*.epk

  # Create GitHub release with all artifacts
  publish-release:
    name: Publish Release
    needs: build-release
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts
        
    - name: Prepare release assets
      run: |
        mkdir -p release-files
        
        # Collect all distribution files
        find release-artifacts -type f \( -name "*.tar.gz" -o -name "*.sha256" -o -name "*.epk" \) -exec cp {} release-files/ \;
        
        # Generate release notes
        VERSION="${GITHUB_REF#refs/tags/v}"
        cat > release-files/RELEASE_NOTES.md << EOF
        ## Epsilon ${VERSION}
        
        ### Installation
        
        Download the appropriate archive for your platform and extract it:
        
        \`\`\`bash
        # Linux x86_64
        curl -LO https://github.com/jbouwman/epsilon/releases/download/v${VERSION}/epsilon-${VERSION}-linux-x86_64.tar.gz
        tar xzf epsilon-${VERSION}-linux-x86_64.tar.gz
        
        # macOS ARM64 (M1/M2)
        curl -LO https://github.com/jbouwman/epsilon/releases/download/v${VERSION}/epsilon-${VERSION}-darwin-arm64.tar.gz
        tar xzf epsilon-${VERSION}-darwin-arm64.tar.gz
        
        # macOS x86_64 (Intel)
        curl -LO https://github.com/jbouwman/epsilon/releases/download/v${VERSION}/epsilon-${VERSION}-darwin-x86_64.tar.gz
        tar xzf epsilon-${VERSION}-darwin-x86_64.tar.gz
        \`\`\`
        
        ### Verify checksums
        
        \`\`\`bash
        sha256sum -c epsilon-${VERSION}-<platform>.tar.gz.sha256
        \`\`\`
        
        ### What's New
        
        See [CHANGELOG.md](https://github.com/jbouwman/epsilon/blob/v${VERSION}/CHANGELOG.md) for details.
        EOF
        
        # List all files to be released
        echo "=== Release files ==="
        ls -la release-files/
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        files: release-files/*
        body_path: release-files/RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
        generate_release_notes: true