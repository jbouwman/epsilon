#!/bin/sh
#
# Epsilon command-line interface
#
# Works from fresh checkout or system installation.
# Requires SBCL to be installed and available in PATH.
#

set -eu

# The user's working directory
export EPSILON_USER="$PWD"
# The directory where epsilon is located
export EPSILON_HOME="$(cd "$(dirname "$0")" && pwd)"
EPSILON_BOOT="$EPSILON_HOME/modules/core/src/epsilon.lisp"

# Detect boot script
if ! [ -f "$EPSILON_BOOT" ]; then
    echo "Error: epsilon boot script not found in $EPSILON_HOME" >&2
    exit 1
fi

# Check if SBCL is available
if ! command -v sbcl >/dev/null 2>&1; then
    echo "Error: SBCL not found in PATH" >&2
    echo "Please install SBCL: https://www.sbcl.org/" >&2
    exit 1
fi

# Parse debug and rebuild flags before passing to SBCL
DEBUG_MODE="false"
REBUILD_BOOT="false"
# Use array to preserve argument boundaries
declare -a FILTERED_ARGS=()
for arg in "$@"; do
    case "$arg" in
        --debug)
            DEBUG_MODE="true"
            ;;
        --rebuild)
            REBUILD_BOOT="true"
            ;;
        *)
            FILTERED_ARGS+=("$arg")
            ;;
    esac
done

# Force rebuild of bootstrap.fasl if requested
if [ "$REBUILD_BOOT" = "true" ]; then
    echo "Forcing rebuild of bootstrap cache..."
    rm -f "$EPSILON_HOME/modules/core/target/bootstrap.fasl"
fi

SBCL_RUNTIME_ARGS="--noinform"
if [ "$DEBUG_MODE" = "true" ]; then
    SBCL_TOPLEVEL_ARGS="--no-sysinit --no-userinit --quit"
else
    SBCL_TOPLEVEL_ARGS="--no-sysinit --no-userinit --disable-debugger --quit"
fi

cd "$EPSILON_HOME"
# Note: SBCL args must be unquoted, user args must be quoted
if [ ${#FILTERED_ARGS[@]} -eq 0 ]; then
    exec sbcl $SBCL_RUNTIME_ARGS \
         $SBCL_TOPLEVEL_ARGS \
         --load "$EPSILON_BOOT" \
         --eval "(epsilon.main:cli-run)" \
         --
else
    exec sbcl $SBCL_RUNTIME_ARGS \
         $SBCL_TOPLEVEL_ARGS \
         --load "$EPSILON_BOOT" \
         --eval "(epsilon.main:cli-run)" \
         -- "${FILTERED_ARGS[@]}"
fi
